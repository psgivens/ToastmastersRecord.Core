// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ToastmastersRecord.Data;

namespace ToastmastersRecord.Data.Migrations
{
    [DbContext(typeof(ToastmastersEFDbContext))]
    [Migration("20190420211550_InitialDomain")]
    partial class InitialDomain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.ClubMeetingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("State");

                    b.Property<string>("Theme");

                    b.HasKey("Id");

                    b.ToTable("ClubMeetings");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.DayOffEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MeetingId");

                    b.Property<Guid>("MemberId");

                    b.Property<Guid>("MessageId");

                    b.HasKey("Id");

                    b.ToTable("DaysOff");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.MemberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address5");

                    b.Property<string>("Awards");

                    b.Property<DateTime>("ClubMemberSince")
                        .HasColumnType("Date");

                    b.Property<string>("Country");

                    b.Property<string>("CurrentPosition");

                    b.Property<string>("Email");

                    b.Property<string>("FuturePosition");

                    b.Property<string>("HomePhone");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MobilePhone");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OriginalJoinDate")
                        .HasColumnType("Date");

                    b.Property<string>("PaidStatus");

                    b.Property<DateTime>("PaidUntil")
                        .HasColumnType("Date");

                    b.Property<int>("ToastmasterId");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.MemberHistoryAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AggregateCalculationDate")
                        .HasColumnType("Date");

                    b.Property<int>("CalculatedSpeechCount");

                    b.Property<int>("ConfirmedSpeechCount");

                    b.Property<DateTime>("DateAsGeneralEvaluator")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateAsTableTopicsMaster")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateAsToastmaster")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfLastEvaluation")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfLastFacilitatorRole")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfLastFunctionaryRole")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfLastMajorRole")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfLastMinorRole")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfLastRole")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfLastSpeech")
                        .HasColumnType("Date");

                    b.Property<string>("DisplayName");

                    b.Property<int>("EligibilityCount");

                    b.Property<string>("SpecialRequest");

                    b.Property<DateTime>("SpeechCountConfirmedDate")
                        .HasColumnType("Date");

                    b.Property<bool>("WillAttend");

                    b.HasKey("Id");

                    b.ToTable("MemberHistories");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.MemberMessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MemberId");

                    b.Property<string>("Message");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.RolePlacementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MeetingId");

                    b.Property<Guid>("MemberId");

                    b.Property<Guid>("RoleRequestId");

                    b.Property<int>("RoleTypeId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.ToTable("RolePlacements");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.RoleRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brief");

                    b.Property<Guid>("MemberId");

                    b.Property<Guid>("MessageId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.ToTable("RoleRequests");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.RoleRequestMeeting", b =>
                {
                    b.Property<Guid>("RoleRequestId");

                    b.Property<Guid>("MeetingId");

                    b.HasKey("RoleRequestId", "MeetingId");

                    b.HasAlternateKey("MeetingId", "RoleRequestId");

                    b.ToTable("RoleRequestMeetings");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.RoleTypeEntity", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Classification");

                    b.Property<int>("MinimumSpeechCount");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("RoleTypes");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.EnvelopeEntityBase", b =>
                {
                    b.Property<Guid>("StreamId");

                    b.Property<Guid>("UserId");

                    b.Property<Guid>("Id");

                    b.Property<string>("DeviceId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Event");

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.Property<Guid>("TransactionId");

                    b.Property<short>("Version");

                    b.HasKey("StreamId", "UserId", "Id");

                    b.HasAlternateKey("Id", "StreamId", "UserId");

                    b.ToTable("EnvelopeEntityBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EnvelopeEntityBase");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.ClubMeetingEnvelopeEntity", b =>
                {
                    b.HasBaseType("ToastmastersRecord.Data.EnvelopeEntityBase");

                    b.HasDiscriminator().HasValue("ClubMeetingEnvelopeEntity");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.MemberEnvelopeEntity", b =>
                {
                    b.HasBaseType("ToastmastersRecord.Data.EnvelopeEntityBase");

                    b.HasDiscriminator().HasValue("MemberEnvelopeEntity");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.RolePlacementEnvelopeEntity", b =>
                {
                    b.HasBaseType("ToastmastersRecord.Data.EnvelopeEntityBase");

                    b.ToTable("RolePlacementEvents");

                    b.HasDiscriminator().HasValue("RolePlacementEnvelopeEntity");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.RoleRequestEnvelopeEntity", b =>
                {
                    b.HasBaseType("ToastmastersRecord.Data.EnvelopeEntityBase");

                    b.ToTable("RoleRequestEvents");

                    b.HasDiscriminator().HasValue("RoleRequestEnvelopeEntity");
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.MemberMessageEntity", b =>
                {
                    b.HasOne("ToastmastersRecord.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ToastmastersRecord.Data.Entities.RoleRequestMeeting", b =>
                {
                    b.HasOne("ToastmastersRecord.Data.Entities.RoleRequestEntity", "RoleRequest")
                        .WithMany("Meetings")
                        .HasForeignKey("RoleRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
